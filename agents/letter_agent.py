# LetterAgent - Generates formal legal complaint letters
import os
from typing import Dict
from langchain_nvidia_ai_endpoints import ChatNVIDIA

class LetterAgent:
    def __init__(self):
        # Give the agent a name
        self.name = "LetterAgent"
        
        # Get API key from environment
        api_key = os.getenv("NVIDIA_API_KEY")
        if not api_key:
            raise ValueError("NVIDIA_API_KEY not found in environment variables")
        
        # Initialize NVIDIA LLM - this is our connection to the AI
        self.llm = ChatNVIDIA(
            model="meta/llama-3.1-70b-instruct",
            api_key=api_key,
            temperature=0.2  # Slightly higher for more natural letter writing
        )
        
        print(f"{self.name} initialized with NVIDIA LLM!")
    
    def generate_complaint_letter(self, analysis_data: Dict, tenant_info: Dict) -> Dict:
        """
        Uses NVIDIA LLM to generate formal complaint letter
        """
        print(f"\n{self.name} generating complaint letter with NVIDIA AI...")
        
        # Build the prompt for letter generation
        prompt = f"""You are a professional legal document writer specializing in tenant rights.

Generate a formal complaint letter using the EXACT information provided below. Do NOT use placeholders like [Your Name] or [Your Address]. Use the actual names and addresses provided.

ANALYSIS: {analysis_data.get('analysis', 'No analysis provided')}

TENANT INFORMATION (USE THESE EXACT VALUES):
- Tenant Name: {tenant_info.get('name', 'Tenant Name')}
- Property Address: {tenant_info.get('address', 'Property Address')}
- Landlord/Company: {tenant_info.get('landlord', 'Landlord Name')}
- Today's Date: {tenant_info.get('date', 'Date of Issue')}

LETTER FORMAT REQUIREMENTS:
1. Start with the tenant's name and property address (not placeholders)
2. Address the letter to the specific landlord/company name provided
3. Use today's date as provided
4. Include a clear "Re:" subject line about the specific property address
5. Reference relevant NYC laws and statutes from the analysis
6. Request specific remedial action with a 10-day deadline
7. End with the tenant's actual name

CRITICAL: Replace ALL placeholder text with the actual information provided above. Do not include any text in brackets like [Name] or [Address]."""

        # Call NVIDIA LLM to generate the letter
        response = self.llm.invoke(prompt)
        
        # Return the generated letter
        return {
            "letter_content": response.content,
            "generated_by": "NVIDIA Llama 3.1 70B",
            "letter_type": "Tenant Complaint Letter"
        }

# Test the agent
if __name__ == "__main__":
    # Test data
    test_analysis = {
        "analysis": "Legitimate issue found: Landlord violated NYC Admin Code by entering without proper notice"
    }
    
    test_tenant_info = {
        "name": "John Doe",
        "address": "123 Main St, New York, NY 10001",
        "landlord": "ABC Property Management",
        "date": "January 15, 2024"
    }
    
    try:
        agent = LetterAgent()
        result = agent.generate_complaint_letter(test_analysis, test_tenant_info)
        
        print("\n--- Generated Letter ---")
        print(result["letter_content"][:500] + "...")  # First 500 characters
        print(f"\nGenerated by: {result['generated_by']}")
        
    except ValueError as e:
        print(f"Error: {e}")
        print("Note: Set NVIDIA_API_KEY environment variable to test")